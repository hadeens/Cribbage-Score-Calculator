from cribbage import Card, Hand
import random
from itertools import combinations
    
def getHand_random(deck, players = 2):
    """Randomly generates a hand for the user and their opponents.
        
        Parameters:
        -----------
        deck : list of card objects
            full deck of 52 playing cards
            
        players : int
            the number of players in the game
            
        Returns:
        --------
        lists of card objects
            the cards dealt to the user at the start of a round,
            the cards dealt to the opposing players,
            and the remaining cards in the deck
        """
    random.shuffle(deck)
    
    if players == 2:
        #create lists for dealing the cards to every other player
        first = random.randint(1,2)
        user = [0] * 6
        opp = [0] * 6
        evens = [0,2,4,6,8,10]
        odds = [1,3,5,7,9,11]
        
        #different senarios for if the player is dealt a card first or the opponent is
        if first == 1:
            for index, num in enumerate(evens):
                user[index] = deck[num]
            for index, num in enumerate(odds):
                opp[index] = deck[num]       
        else:
            for index, num in enumerate(evens):
                opp[index] = deck[num]
            for index, num in enumerate(odds):
                user[index] = deck[num]
        
        #remove the dealt cards from the deck
        iteration = 0
        while iteration < 12:
            deck.remove(deck[0])
            iteration += 1
                
        return user, opp, deck

    else:
        #create lists for dealing the cards to every other player
        first = random.randint(1,3)
        user = [0] * 5
        opp1 = [0] * 5
        opp2 = [0] * 5
        one = [0,3,6,9,12]
        two = [1,4,7,10,13]
        three = [2,5,8,11,14]
        crib = 15
        
        #different senarios for if the player is dealt a card first or either opponent is
        if first == 1:
            for index, num in enumerate(one):
                user[index] = deck[num]
            for index, num in enumerate(two):
                opp1[index] = deck[num]
            for index, num in enumerate(three):
                opp2[index] = deck[num]
        elif first == 2:
            for index, num in enumerate(one):
                opp1[index] = deck[num]
            for index, num in enumerate(two):
                opp2[index] = deck[num]
            for index, num in enumerate(three):
                user[index] = deck[num]
        elif first == 3:
            for index, num in enumerate(one):
                opp2[index] = deck[num]
            for index, num in enumerate(two):
                user[index] = deck[num]
            for index, num in enumerate(three):
                opp1[index] = deck[num]
        
        crib = deck[15]
        
        #remove the dealt cards from the deck
        iteration = 0
        while iteration < 16:
            deck.remove(deck[0])
            iteration += 1
                
        return user, opp1, opp2, deck, crib
    
def getHand_possibilities(userDealt):
    """Gets each possible hand that the user can choose from the cards they were dealt.
        
        Parameters:
        -----------
        userDealt : hand object
            the cards dealt to the user at the start of the round
            
        Returns:
        --------
        list of hand objects
            a list containing each possible hand
        """
    choices = list(combinations(userDealt, 4))
    
    #convert the options from combinations function into Hand objects and appends them to the list
    copy = []
    for choice in choices:
        option = Hand(choice)
        copy.append(option)
        
    return copy
         
def getHand_subgroups(possibleHand, starter = 0):
    """Gets all of the subgroups of each possible hand to allow for calculation.

        Parameters:
        -----------
        possibleHand : hand object
            one of the possible hands generated by getHand_possibilities
            
        starter : int
            an integer that corresponds to whether the starter card is included or not
            
        Returns:
        --------
        dictionary of Hand objects
            all of the subgroups of the possible hand
            key : str
                an uppercase letter representing the subgroup
            value : list of Hand objects
                every Hand in each subgroup of cards
        """
    groupDict = {}
    
    #3 subgroups for if there is only 4 cards in a possible hand
    if starter == 0:
        #four cards
        groupDict["A"] = possibleHand
        
        #three cards
        B = []
        for group in list(combinations(possibleHand, 3)):
            B.append(Hand(group))
        groupDict["B"] = B
        
        #two cards
        C = []
        for group in list(combinations(possibleHand, 2)):
            C.append(Hand(group))
        groupDict["C"] = C
        
        return groupDict
    #4 subgroups for if the starter card is included
    else:
        #five cards
        groupDict["D"] = possibleHand
        
        #four cards
        E = []
        for group in list(combinations(possibleHand, 4)):
            E.append(Hand(group))
        groupDict["E"] = E
        
        #three cards
        F = []
        for group in list(combinations(possibleHand, 3)):
            F.append(Hand(group))
        groupDict["F"] = F
        
        #two cards
        G = []
        for group in list(combinations(possibleHand, 2)):
            G.append(Hand(group))
        groupDict["G"] = G
        
        return groupDict
    
def calculate_hand(subgroups, starter = 0):
    """Calculates the number of points from a possible hand using the subgroups above.

        Parameters:
        -----------
        subgroups : dictionary of Hand objects
            all of the subgroups of the possible hand
            key : str
                an uppercase letter representing the subgroup
            value : list of Hand objects
                every Hand in each subgroup of cards
                
        starter : int
            an integer that corresponds to whether the starter card is included or not
            
        Returns:
        --------
        int
            the amount of points the hand achieves based on the subgroups
        """
    points = 0
    
    if starter == 0:
        #all 4 cards add to 15
        if subgroups["A"].addto15():
            points += 2
        #three cards add to 15
        for subgroup in subgroups["B"]:
            if subgroup.addto15():
                points += 2
        #two cards add to 15
        for subgroup in subgroups["C"]:
            if subgroup.addto15():
                points += 2
        
        if subgroups["A"].ofakind():
            points += 12
            #four of a kind
        else:
            for subgroup in subgroups["B"]:
                if subgroup.ofakind():
                    points += 6
                    break
                    #three of a kind
            else:
                for subgroup in subgroups["C"]:
                    if subgroup.ofakind():
                        points += 2
                        #pair
        
        #all four cards are sequential
        if subgroups["A"].run():
            points += 4
        else:
            #three cards are sequential
            for subgroup in subgroups["B"]:
                if subgroup.run():
                    points += 3
        
        #all four cards are of the same suit
        if subgroups["A"].flush():
            points += 4
    
    else:
        #all 5 cards add to 15
        if subgroups["D"].addto15():
            points += 2
        #four cards add to 15
        for subgroup in subgroups["E"]:
            if subgroup.addto15():
                points += 2
        #three cards add to 15
        for subgroup in subgroups["F"]:
            if subgroup.addto15():
                points += 2
        #two cards add to 15
        for subgroup in subgroups["G"]:
            if subgroup.addto15():
                points += 2
        
        for subgroup in subgroups["E"]:
            if subgroup.ofakind():
                points += 12
                break
                #four of a kind
        else:
            for subgroup in subgroups["F"]:
                if subgroup.ofakind():
                    points += 6
                    break
                    #three of a kind
            else:
                for subgroup in subgroups["G"]:
                    if subgroup.ofakind():
                        points += 2
                        #pair
        
        #all five cards are sequential
        if subgroups["D"].run():
            points += 5
        else:
            #four cards are sequential
            runs = 0
            for subgroup in subgroups["E"]:
                if subgroup.run():
                    points += 4
                    runs += 1
            if runs == 0:
                #three cards are sequential
                for subgroup in subgroups["F"]:
                    if subgroup.run():
                        points += 3
        
        #all five cards are of the same suit
        if subgroups["D"].flush():
            points += 5
        else:
            #four cards exculding the starter are of the same suit
            stat = subgroups["D"][4]
            subgroups["D"].remove(stat)
            if subgroups["D"].flush():
                points += 4
            subgroups["D"].append(stat)
                    
        #hand contains a jack of the same suit as the starter
        if subgroups["D"].nobs():
            points += 1
            
    return points

def compare(options):
    """Compares all of the possible hands and complies them into the top three best hands.

        Parameters:
        -----------
        options : list of hand objects
            a list containing each possible hand
            
        Returns:
        --------
        list of tuples
            the top three hands in terms of points, each in a tuple with two items (hand object, points)
        """
    pointDict = {}
    
    #calculates the point totals for each possible hand and updated the dictionary
    for item in options:
        points = calculate_hand(getHand_subgroups(item))
        pointDict[item] = points
    
    #uses lambda function to sort dictionary items by point value in reverse order and places top 3 in a list
    sort = sorted(pointDict.items(), key=lambda x:x[1], reverse=True)
    top3 = [sort[0], sort[1], sort[2]]
    
    return top3
              
def getRandom_starter(deck, players = 2):
    """Generates a random starter card from the remaining cards in the deck.
        
        Parameters:
        -----------
        deck : list of card objects
            the cards remaining in the deck
            
        players : int
            the amount of players in the game
            
        Returns:
        --------
        card object
            a starter card that is added to the user's chosen hand
        list of card objects
            the remaining cards in the deck
        """
    #generate starter from the remaining 40 cards
    if players == 2:
        starter = deck[random.randint(0,39)]
        deck.remove(starter)
        return starter, deck
    #generate starter from the remaining 36 cards
    else:
        starter = deck[random.randint(0,35)]
        deck.remove(starter)
        return starter, deck
    
if __name__ == "__main__":
    
    names_values = [("Ace", 1), ("2", 2), ("3", 3), ("4", 4), ("5", 5), ("6", 6), ("7", 7), ("8", 8),
                    ("9", 9), ("10", 10), ("Jack", 10), ("Queen", 10), ("King", 10)]
    _suits = ["Spades", "Clubs", "Hearts", "Diamonds"]
        
    orderedDeck = [Card(name, suit, value) for name, value in names_values for suit in _suits]

    dealtcards = getHand_random(orderedDeck, 3)

    _user = Hand(dealtcards[0])
    opponent = Hand(dealtcards[1])
    opponent2 = Hand(dealtcards[2])
    deck1 = dealtcards[3]
    kitty = Hand(dealtcards[4])

    print(f'User: {_user}')
    print()
    print(f'Opponent: {opponent}')
    print()
    print(f'Opponent2: {opponent2}')
    print()
    print(f'Deck: {deck1}')
    print()
    print(f'Crib: {kitty}')
    print()

    top_3 = compare(getHand_possibilities(_user))
    print(f'Hand 1 {top_3[0][0]} Points: {top_3[0][1]}')
    print(f'Hand 2 {top_3[1][0]} Points: {top_3[1][1]}')
    print(f'Hand 3 {top_3[2][0]} Points: {top_3[2][1]}')

    print()
    userChoice = int(input("which hand would you like to choose? (1-3)"))
    userHand = top_3[userChoice-1][0]
    start = getRandom_starter(deck1, 3)
    deck2 = start[1]
    userHand.append(start[0])
    print()
    print(f'Hand with Starter: {userHand}')

    total = calculate_hand(getHand_subgroups(userHand, starter = 1), starter = 1)
    print(f'Points = {total}') 